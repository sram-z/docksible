#!/bin/bash

# Copyright (C) 2022  Zoltan SRAM

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# Constants variable
readonly USAGE="
run <command> [option]

Commands:
  -c :  Create one or more containers separeted by a comma.
 
  -a :  Create minimal structure for ansible.
 
  -p :  Delete all container(s) created by Docksible (purge).

  -l :  List conainer(s) created by Docksible.    

Options:      
  -k :  Permit to initialise containers with your ssh key.
        Example: Docksible create -k <your_ssh_public_key>. 
        (It supposed that your ssh key is stored in the default directory: ~/.ssh/key_ssh.pub)

  -h :   help
"


readonly ANSIBLE_STRUCTURE="
All:
  vars:
    ansible_python_interpreter: /usr/bin/python3
  hosts:"


# Functions
_exit(){
    cr=${1}
    echo "Exit with code ${cr}"
    exit "${cr}"
}

_fail(){
    msg="${*}"
    echo "ERROR ${msg:-no message}"
    _exit 1
}

# shellcheck disable=SC2120
_succeed(){
    msg="${*}"
    echo "${msg:-no message}"
    _exit 0
}

_createpasswd(){
    openssl passwd -6 -salt "${@}"
}

_list(){
    if [[ -e host_names ]]; then
        echo "List of the containers created by Docksible:"
        echo "HOSTS / IP ADRESSES:"
        echo "--------------------"
        while read -r hostname; do
            ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$hostname")
            echo "$hostname : $ip" 
        done < host_names
    else
        _succeed "I didn't find containers created by Docksible."
    fi
}

_ansible(){
    mkdir -p ansible/group_vars ansible/host_vars
    touch ansible/00_inventory.yml
    echo "${ANSIBLE_STRUCTURE}" > ansible/00_inventory.yml
    if [[ -e host_names ]]; then 
        while read -r hostname; do
        ip=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$hostname")
        echo "    $ip:" >> ansible/00_inventory.yml
        done < host_names
    fi
    _succeed
}


_purge(){
    if [[ -e host_names ]]; then
        echo "The followed container(s) will be purged:"
        while read -r hostname; do
        docker rm -f "$hostname"
        done < host_names
        rm -rf ansible/ && rm -r host_names
    else
        echo "Nothing to purge."
    fi
    _succeed
}


_help(){
    echo -e "${USAGE}"
    _succeed
} 

_create(){
    user_passwd=$(_createpasswd "${USER}" "${USER}")
    IFS=", " read -r -a names <<< "$1" 
    for name in "${names[@]}";do
        docker run -tid --privileged -v /sys/fs/cgroup:/sys/fs/cgroup --cgroupns=host --name "${name}" -h "${name}" sramz/debian-systemd-ssh:latest
        docker exec -ti "${name}" /bin/bash -c "useradd -m -p '$user_passwd' $USER"
        docker exec -ti "${name}" /bin/bash -c "usermod -aG sudo ${USER}"
        docker exec -ti "${name}" /bin/bash -c "mkdir  ${HOME}/.ssh && chmod 700 ${HOME}/.ssh && chown $USER:$USER $HOME/.ssh"
        if [[ $2 != "" ]] ; then
            docker cp "$HOME"/.ssh/"$2" "${name}":"$HOME"/.ssh/authorized_keys
            docker exec -ti "${name}" /bin/bash -c "chmod 600 ${HOME}/.ssh/authorized_keys && chown $USER:$USER $HOME/.ssh/authorized_keys"
            docker exec -ti "${name}" /bin/bash -c "systemctl start ssh"
        fi
        echo "${name}" >> host_names
        _succeed "The followed container(s) was created:" "${names[@]}"
    done
}


main(){
    while getopts 'c:k:lpa' OPTION; do
        case "$OPTION" in
            k) ssh_key="$OPTARG" ;;

            c) create="$OPTARG" ;;

            l) _list ;;

            p) _purge ;;

            a) _ansible ;;

            ?) _help ;;
        esac
    done
    shift $((OPTIND-1))

    if [[ $ssh_key != "" ]]; then
        _create "$create" "$ssh_key"
    else
        _create "$create"
    fi
}

main "$@"